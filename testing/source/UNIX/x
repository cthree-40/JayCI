%!PS-Adobe-3.0
%%Creator: A2ps version 4.3
%%CreationDate: Thu Mar 19 10:49:00 1998
%%Pages: (atend)
%%DocumentFonts: Courier Courier-Bold Helvetica Helvetica-Bold
%%EndComments
% Copyright (c) 1993, 1994, Miguel Santana, M.Santana@frgu.bull.fr

/$a2psdict 100 dict def
$a2psdict begin

% General macros.
/xdef {exch def} bind def
/getfont {exch findfont exch scalefont} bind def

% Create Courier backspace font
/backspacefont {
    /Courier findfont dup length dict begin
	{ % forall
	    1 index /FID eq { pop pop } { def } ifelse
	} forall
	currentdict /UniqueID known { % if
	    /UniqueID UniqueID 16#800000 xor def
	} if
	CharStrings length 1 add dict begin
	    CharStrings { def } forall
	    /backspace { -600 0 0 0 0 0 setcachedevice } bind def
	    currentdict
	end
	/CharStrings exch def
	/Encoding Encoding 256 array copy def
	Encoding 8 /backspace put
	currentdict
    end
    definefont pop
} bind def

% FUNCTIONS

% Function filename: Initialize file printing.
/fn
{ /filenm xdef
  /filenmwidth filenm stringwidth pop def
  /filenmfont
       filenmwidth fns gt
       {
	       filenmfontname
	       fnfs fns mul filenmwidth div
	     getfont
       }
       { sfnf }
     ifelse
  def
} bind def

% Function header: prints page header. no page
% is passed as argument.
/hp
  { x sd get  y sd get hs sub 1 add  moveto
    df setfont
    gsave
      x sd get y sd get moveto
      0 hs 2 div neg rmoveto 
      hs setlinewidth
      0.95 setgray
      pw 0 rlineto stroke
    grestore
    gsave
      dfs hm rmoveto
      d show				% date/hour
    grestore
    gsave
      pnum cvs pop				% page pop up
        pw (Page 999) stringwidth pop sub
        hm
	  rmoveto
      (Page ) show pnum show		% page number
    grestore
    empty pnum copy pop
    gsave
      filenmfont setfont
         fns filenm stringwidth pop sub 2 div dw add
          bm 2 mul 
        add 
        hm
      rmoveto
        filenm show			% file name
      grestore
    } bind def

% Function border: prints border page
/border 
{ x sd get y sd get moveto
  gsave				% print four sides
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function hborder: completes border of the header.
/hborder 
{ gsave
	0.7 setlinewidth
	0 hs neg rmoveto
	pw 0 rlineto
	stroke
  grestore
} bind def

% Function sheetnumber: prints the sheet number.
/sn
    { snx sny moveto
      df setfont
      pnum cvs
	  dup stringwidth pop (0) stringwidth pop sub neg 0 rmoveto show
      empty pnum copy pop
    } bind def

% Function loginprint: prints the login id of the requestor.
/lgp
    { lx ly moveto
      df setfont
      dup stringwidth pop neg 0 rmoveto show
    } bind def

% Function currentdate: prints the current date.
/cd
    { dx dy moveto
      df setfont
      (Printed: ) show
      td show
    } bind def

% Function filename_footer: prints the file name at bottom of page.
/fnf
    { fnx fny moveto
      df setfont
      filenm center show
    } bind def

% Function center: centers text.
/center
    { dup stringwidth pop
      2 div neg 0 rmoveto
    } bind def

% Function s: print a source line
/s  { show
      /y0 y0 bfs sub def
      x0 y0 moveto
    } bind def

% Functions b and st: change to bold or standard font
/b  { show
      bdf setfont
    } bind def
/st { show
      bf setfont
    } bind def

% Strings used to make easy printing numbers
/pnum 12 string def
/empty 12 string def

% Global initializations

/CourierBack backspacefont
/filenmfontname /Helvetica-Bold def
/inch {72 mul} bind def

%
% Meaning of some variables and functions (coded names)
%
%	twp:		twinpages?
%	sd:		sheet side
%	l:		line counter
%	c:		column counter
%	d:		date
%	td:		current date (for today)
%	lg:		login name
%	fn:		filename printing function
%	sn:		sheetnumber printing function
%	cd:		current date printing function
%	fnf:		filename footer printing function
%	lgp:		login printing function
%	hp:		header printing function
%	y:		y coordinate for the logical page
%	x:		x coordinate for the logical page
%	sny:		y coordinate for the sheet number
%	snx:		x coordinate for the sheet number
%	dy:		y coordinate for the date
%	dx:		x coordinate for the date
%	ly:		y coordinate for the login
%	lx:		x coordinate for the login
%	scx:		x coordinate for the sheet center
%	fny:		y coordinate for the filename (footer)
%	fnx:		x coordinate for the filename (footer)
%	fnfs:		filename font size
%	bfs:		body font size
%	dfs:		date font size
%	bfs:		body font size
%	df:		date font
%	bf:		body font
%	bdf:		bold font
%	sfnf:		standard filename font
%	dw:		date width
%	pw:		page width
%	sw:		sheet width
%	ph:		page height
%	sh:		sheet height
%	hm:		header margin
%	tm:		top margin
%	bm:		body margin
%	rm:		right margin
%	lm:		left margin
%	hs:		header size
%	fns:		filename size

% Initialize page description variables.
/x0 0 def
/y0 0 def
/sh 11.64 inch def
/sw 8.27 inch def
/margin 1.4 inch def
/rm margin 3 div def
/lm margin 2 mul 3 div def
/d () def
/td (Mar 19 1998 10:49) def
/lg (Printed by calderon from medoc) def
%%EndProlog

/docsave save def
%%Page: 1 1
/pagesave save def
/twp true def
/fnfs 11 def
/dfs fnfs 0.8 mul def
/df /Helvetica dfs getfont def
/dw df setfont td stringwidth pop def
/sfnf filenmfontname fnfs getfont def
/hm fnfs 0.25 mul def
/hs 0.22 inch def
/bfs 6.8 def
/bdf /Courier-Bold bfs getfont def
/bm bfs 0.7 mul def
/bf /CourierBack bfs getfont def
/l 69 def
/c 89 def
/pw
   bf setfont (0) stringwidth pop c mul bm dup add add
   def
/ph
   bfs l mul bm dup add add hs add
   def
/fns
      pw
      fnfs 4 mul dw add (Page 999) stringwidth pop add
    sub
  def
/tm margin twp {3} {2} ifelse div def
/sd 0 def
/y [ rm ph add bm add
          dup ] def
/sny dfs dfs add def
/snx sh tm dfs add sub def
/dy sny def
/dx tm dfs add def
/x [ tm			% left page
          dup 2 mul pw add	% right page
        ] def
/scx sh 2 div def
/fny dy def
/fnx scx def
/ly fnfs 2 div y sd get add def
/lx snx def
/d (Mar 16 1998 12:24) def
( falloc.c ) fn
sw 0 translate
90 rotate
1 hp
border
hborder
/x0 x 0 get bm add def
/y0 y 0 get bm bfs add hs add sub def
x0 y0 moveto
bf setfont
( /* ) s
( ) s
(   Fortran interface to the C malloc\(\)/calloc\(\) functions.  ) s
(   \(patterned after the Stardent library routine falloc\(\) \)) s
(   14-apr-92 -ron shepard) s
( ) s
(   Usage:) s
( ) s
(       real*8 work\(1\) ! define a reference array with elements of the) s
(                      ! correct size to ensure correct byte alignment.) s
(       integer nelem, elsize, clean, addr, offset) s
(       elsize = 8  ! 8 for real*8 \(see below\).) s
(       clean  = 0  ! don't bother to initialize to zero.) s
( ) s
(       call falloc\( nelem, elsize, clean, work, addr, offset \)) s
( ) s
(       if \( addr .ne. 0 \) then) s
(          ! work\(offset+1 : offset+nelem\) is usable.) s
(       else) s
(          ! memory allocation error) s
(       endif) s
( ) s
(   This function is required in the COLUMBUS Program System for the) s
(   following machines:) s
(   IBM RS6000) s
(   FUJITSU VP2000) s
(   FPS 500EA \(optional, FPS may also use fdma.c and %val\(\) convention\)) s
( ) s
( */) s
( ) s
( #include "extsymbols.h"  /* Define the external symbol: */) s
( ) s
( void EXTERNAL_FALLOC\( nelem, elsize, clean, work, addr, offset \)) s
( ) s
( long *nelem;   /* input: number of elements */) s
( long *elsize;  /* input: element size; 8 for real*8, 4 for integer*4, etc. */) s
( long *clean;   /* input: 1 to initialize the allocated space to zero.) s
(                          0 to leave the allocated space unitialized. */) s
( char *work;    /* input: work array as declared in the calling program */) s
( long *addr;    /* output: pointer to the allocated memory. ) s
(                           0 for allocation error. */) s
( long *offset;  /* output: offset to be used in the calling program */) s
( ) s
( {) s
(   char *dummy ;) s
(   extern char *malloc\(\);) s
(   extern char *calloc\(\);) s
( ) s
(   /* allocate nelem+1 elements to allow for alignment */) s
( ) s
(   if \( *clean \) {) s
(     *addr = \(long\) \(dummy ) s
(                     = calloc\( \(unsigned\) \(*nelem + 1\), \(unsigned\) *elsize \) \) ;) s
(   } else {) s
(     *addr = \(long\) \(dummy) s
(                     = malloc\( \(unsigned\) \(*elsize * \(*nelem + 1\)\) \) \) ;) s
(   }) s
( ) s
(   /* ) s
(     The following expressions are not strictly legal because pointer ) s
(     arithmetic is being performed on different arrays.  However, this ) s
(     seems to work alright on essentially all machines, and this routine ) s
(     would be rather difficult to design without resorting to this tactic.) s
(   */) s
( ) s
(   if \( dummy > work \) {) s
(     *offset = \(dummy - work\) / *elsize + 1 ;) s
(   } else {) s
(     /*) s
/sd 1 def
2 hp
border
hborder
/x0 x 1 get bm add def
/y0 y 1 get bm bfs add hs add sub def
x0 y0 moveto
bf setfont
(       this integer division must round towards zero.  In C, this ) s
(       is only enforced for positive dividends. \(K&R 1st Ed. p. 188,) s
(       K&R 2nd Ed. p. 205, ANSI X3.159-1989 p. 47\)  Therefore, the) s
(       numerator has been rearranged to guarantee correct behavior.) s
(     */) s
(     *offset = -\(\(work - dummy\) / *elsize\) ; ) s
(   }) s
(   ) s
(   return ;) s
( }) s
/sd 0 def
1 sn
fnf
lg lgp
pagesave restore
showpage

%%Trailer
%%Pages: 1
docsave restore end
