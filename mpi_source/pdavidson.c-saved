// File: pdavidson.c
/*
 * Parallel davidson algorithm
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "pjayci_global.h"
#include "errorlib.h"
#include "arrayutil.h"
#include "allocate_mem.h"
#include "mpi_utilities.h"
#include "binarystr.h"
#include "citruncate.h"
#include "action_util.h"
#include "pdavidson.h"
#include <mpi.h>
#include <ga.h>
#include <macdecls.h>

/*
 * pdavidson: parallel implementation of davidson algorithm.
 */
int pdavidson(struct occstr *pstrings, struct eospace *peospace, int pegrps,
              struct occstr *qstrings, struct eospace *qeospace, int qegrps,
              int **pq_space_pairs, int num_pq, double *moints1, double *moints2,
              int aelec, int belec, int intorb, int ndets, double nucrep_e,
              double frzcore_e, int printlvl, int maxiter, int krymin,
              int krymax, int nroots, int prediagr, int refdim, int restol)
{
        int error = 0;

        int hmat_chunk  = 0;              /* Size of Hv=c chunks per process */
        int row_lwrbnd = 0;               /* Lower bound of Hv=c rows */
        int row_uprbnd = 0;               /* Upper bound of Hv=c rows */
        int col_lwrbnd = 0;               /* Lower bound of Hv=c columns */
        int col_uprbnd = 0;               /* Upper bound of Hv=c columns */
        int pq_start = 0, pq_final = 0;   /* p,q pairings start/final */
        int pstart = 0, pfinal = 0;       /* p string start/final */
        int qstart = 0, qfinal = 0;       /* q string start/final */

        double *hdgls_local = NULL;   /* <i|H|i> local elements */
        int hdgls_chunk = 0;          /* <i|H|i> chunksize */
        int hdgls_lo = 0;             /* <i|H|i> first index (i) */
        int hdgls_hi = 0;             /* <i|H|i> final index (i) */

        double **vhv = NULL;     /* v.Hv matrix */

        int v_hndl = 0;           /* GLOBAL basis vectors handle */
        int v_dims[2]  = {0, 0};  /* GLOBAL basis vectors dimensions */
        int v_chunk[2] = {0, 0};  /* GLOBAL basis vectors chunksize */
        double **v_local = NULL;  /* LOCAL  basis vectors */

        int c_hndl = 0;           /* GLOBAL Hv=c vectors handle */
        int c_dims[2]  = {0, 0};  /* GLOBAL Hv=c vectors dimensions */
        int c_chunk[2] = {0, 0};  /* GLOBAL Hv=c vectors chunksize */
        double **c_local = NULL;  /* Hv=c  vectors */

        int n_hndl = 0;           /* GLOBAL new vector handle */
        int n_dims[1]  = {0};     /* GLOBAL new vector dimensions */
        int n_chunk[1] = {0};     /* GLOBAL new vector chunksize */
        double *n_local  = NULL;  /* new vector */

        int r_hndl = 0;           /* GLOBAL residual vector handle */
        double *r_local  = NULL;  /* residual vector: Hv - (v.Hv)c = r */

        int citer = 0; /* Current iteration */
        int croot = 0; /* Current root */
        int ckdim = 0; /* Current dimension of krylov space */
        
        /* Compute Hmat matrix chunk information. Chunksize is determined
         * by number of upper-triangle matrix elements to be evaluated. These
         * will be divied up as well as possible. Each process will be given
         * a starting and ending row. The determinant information for these
         * starting rows is computed.*/
        compute_cimat_chunks(ndets, &hmat_chunk, &row_lwrbnd, &row_uprbnd);
        determinant_string_info(row_lwrbnd, peospace, pegrps, qeospace, qegrps,
                                pq_space_pairs, num_pq, &pq_start, &pstart, &qstart);
        determinant_string_info(row_uprbnd, peospace, pegrps, qeospace, qegrps,
                                pq_space_pairs, num_pq, &pq_final, &pfinal, &qfinal);
        if (printlvl > 0 && mpi_proc_rank == mpi_root) {
                printf("Chunksize = %15d\n", hmat_chunk);
                fflush(stdout);
        }
        if (printlvl > 1) {
                printf("proc %2d: lower bound = %10d, upper bound = %10d\n",
                       mpi_proc_rank, row_lwrbnd, row_uprbnd);
                fflush(stdout);
        }
        MPI_Barrier(MPI_COMM_WORLD);

        /* Compute diagonal matrix elements, <i|H|i>. Each process will hold a
         * chunk of the 1-d vector d=<i|H|i>. */
        mpi_split_work_array_1d(ndets, &hdgls_chunk, &hdgls_lo, &hdgls_hi);
        hdgls_local = malloc(sizeof(double) * (hdgls_chunk + 10));
        if (hdgls_local == NULL) {
                error_message(mpi_proc_rank, "Could not allocate hdgls_local.",
                              "execute_pjayci");
                error = -100;
                return error;
        }
        compute_diagonal_matrix_elements(hdgls_local, hdgls_lo, hdgls_hi,       
                                         moints1, moints2, aelec, belec,
                                         peospace, pegrps, qeospace, qegrps,
                                         pq_space_pairs, num_pq, pstrings,
                                         qstrings, intorb);  
        if (printlvl > 0 && mpi_proc_rank == mpi_root) {
                printf("<1|H|1> = ");
                printf("%lf\n", (hdgls_local[0] + nucrep_e + frzcore_e));
        }

        /* v.Hv array is allocated only on master process. */
        if (mpi_proc_rank == mpi_root) {
                error = allocate_mem_double(&vhv, krymax, krymax);
                if (error != 0) return error;
        }

        /* Allocate GLOBAL arrays. */
        if (mpi_proc_rank == mpi_root) printf("Creating global arrays...\n");
        /* Create arrays for basis vectors, V, and vectors, HV=C. */
        v_dims[0] = ndets;
        v_dims[1] = krymax;
        v_chunk[0] = ndets / mpi_num_procs - 1;
        v_chunk[1] = krymax;
        v_hndl = NGA_Create(C_DBL, 2, v_dims, "Basis Vectors", v_chunk);  
        if (!v_hndl) GA_Error("Create failed: Basis Vectors", 2);
        if (mpi_proc_rank == mpi_root) printf(" Created array: Basis Vectors\n");
        c_hndl = NGA_Duplicate(v_hndl, "Hv Vectors");
        if (!c_hndl) GA_Error("Duplicate failed: Hv Vectors", 2);
        if (mpi_proc_rank == mpi_root) printf(" Created array: Hv=c Vectors\n");
        /* Create arrays for new vector, N, and residual vector, R. */
        n_dims[0] = ndets;
        n_chunk[0]= ndets / mpi_num_procs - 1;
        n_hndl = NGA_Create(C_DBL, 1, n_dims, "New Vector", n_chunk);
        if (!n_hndl) GA_Error("Create failed: New Vector", 1);
        if (mpi_proc_rank == mpi_root) printf(" Created array: New Vector\n");
        r_hndl = NGA_Duplicate(n_hndl, "Residual Vector");
        if (!r_hndl) GA_Error("Create failed: Residual Vector", 1);
        if (mpi_proc_rank == mpi_root) printf(" Created array: Resid. Vector\n");
        if (mpi_proc_rank == mpi_root) printf("Global arrays created.\n\n");

        
        if (mpi_proc_rank == mpi_root)
                printf("Beginning Davidson algorithm...\n");

        /* Build initial guess basis vectors. */
        build_init_guess_vectors(prediagr, v_hndl, refdim, krymin);
        MPI_Barrier(MPI_COMM_WORLD);

        
        /* .. MAIN LOOP .. */
        citer = 1; croot = 1; ckdim = krymin;
        while (citer < maxiter && croot <= nroots) {
                /* Perform Hv=c on all basis vectors v. Then build the subspace
                 * Hamiltonian v.c = v.Hv */

                /* Diagonalize v.Hv matrix, returning eigenvalues and
                 * eigenvectors */

                /* .. sub LOOP .. */
                while (ckdim < krymax) {
                        /* Generate residual vector */

                        /* Generate new vector and add it to the space */
                        ckdim++;
                        /* Compute Hv=c for new vector */

                        /* Make subspace Hamiltonian. */

                        /* Diagonalize subspace Hamiltonian */
                        citer++;
                }

                /* Truncate krylov space */
                ckdim = krymin;
        }

        if (mpi_proc_rank == mpi_root)
                printf("Davidson algorithm complete.\n\n");

        
        /* Deallocate GLOBAL arrays */
        GA_Destroy(v_hndl);
        GA_Destroy(c_hndl);
        GA_Destroy(n_hndl);
        GA_Destroy(r_hndl);
        
        return error;
}

/*
 * build_init_guess_vectors: build initial guess basis vectors for davidson
 * procedure.
 * Input:
 *  n    = input routine: 1=unit vectors
 *  v    = basis vectors handle (GLOBAL ARRAY)
 *  dim  = dimension of subspace
 *  kmin = krylov space minimum dimension
 */
void build_init_guess_vectors(int n, int v, int dim, int kmin)
{
        double **refspace = NULL; /* Reference space */
        int error = 0;
        int i = 0;
        int lo[2]={0,0}; int hi[2]={0,0};
        int ld[1] = {0};
        
        /* Set all vectors to 0.0 */
        NGA_Zero(v);
        
        /* Only root process will carry this out */
        if (mpi_proc_rank == mpi_root) {
                error = allocate_mem_double(&refspace, dim, dim);
                init_dbl_2darray_0(refspace, dim, dim);
                for (i = 0; i < dim; i++) {
                        refspace[i][i] = 1.0;
                }
                ld[0] = dim;
                lo[0] = 0; lo[1] = 0;
                hi[0] = dim; hi[1] = kmin;
                NGA_Put(v, lo, hi, refspace, ld); 
                deallocate_mem(&refspace, dim, dim);
        }
        return;
}

/*
 * compute_cimat_chunks: compute chunksize of bounds of H for evaluation.
 * Only elements in the upper triangle are computed.
 * Input:
 *  dlen = number of determinants
 */
void compute_cimat_chunks (int dlen, int *chunk, int *lwrbnd, int *uppbnd)
{
        int tmp;
        *chunk = get_upptri_size(dlen);
        *chunk = *chunk / mpi_num_procs;
        tmp = mpi_proc_rank * (*chunk);
        *lwrbnd = get_upptri_element_rownumber(tmp, dlen);
        tmp = (mpi_proc_rank + 1) * (*chunk);
        *uppbnd = get_upptri_element_rownumber(tmp, dlen) - 1;
        /* Upper bound of last chunk should be last row. Because we compute
         * diagonal elements separately, the last row computed is actually
         * the n-1 row, if n is the size of the matrix; so the index for the
         * upperbound is n-2.*/
        if (mpi_proc_rank == (mpi_num_procs - 1)) {
                *uppbnd = dlen - 2;
        }
        return;
}

/*
 * compute_cimat_chunks_2: compute chunksize of bounds of H for evaluation.
 * Only elements in the upper triangle are computed.
 * Input:
 *  dlen = number of determinants
 */
void compute_cimat_chunks_2 (int dlen, int *chunk, int *row_lo, int *row_hi,
                             int *col_lo, int *col_hi)
{
        int tmp;
        *chunk = get_upptri_size(dlen);
        *chunk = *chunk / mpi_num_procs;
        tmp = mpi_proc_rank * (*chunk);
        //*lwrbnd = get_upptri_element_rownumber(tmp, dlen);
        get_upptri_element_position(tmp, dlen, row_lo, col_lo);
        tmp = (mpi_proc_rank + 1) * (*chunk);
        //*uppbnd = get_upptri_element_rownumber(tmp, dlen) - 1;
        get_upptri_element_position(tmp, dlen, row_hi, col_hi);
        /* Upper bound of last chunk should be last row. Because we compute
         * diagonal elements separately, the last row computed is actually
         * the n-1 row, if n is the size of the matrix; so the index for the
         * upperbound is n-2.*/
        //if (mpi_proc_rank == (mpi_num_procs - 1)) {
        //        *uppbnd = dlen - 2;
        //}
        return;
}

/*
 * compute_diagonal_matrix_elements: compute <i|H|i> elements.
 * Input:
 *  hdgls   = digonal elements <i|H|i> for (i = start,...,final)
 *  start   = starting determinant index
 *  final   = final determinant index
 *  mo1     = 1-e integrals
 *  mo2     = 2-e integrals
 *  aelec   = CI alpha electrons
 *  belec   = CI beta  electrons
 *  peosp   = alpha electron orbital spaces
 *  pegrps  = number of alpha electron orbital spaces
 *  qeosp   = beta  electron orbital spaces
 *  qegrps  = number of beta  electron orbital spaces
 *  pq      = (p,q)-space pairings
 *  npq     = number of (p,q)-space pairings
 *  pstrings= alpha strings
 *  qstrings= beta  strings
 *  intorb  = internal orbitals (DOCC + CAS)
 */
void compute_diagonal_matrix_elements(double *hdgls, int start, int final,
                                      double *mo1, double *mo2, int aelec,
                                      int belec, struct eospace *peosp,
                                      int pegrps,struct eospace *qeosp,
                                      int qegrps, int **pq, int npq,
                                      struct occstr *pstrings,
                                      struct occstr *qstrings,
                                      int intorb)
{
        int pq_start = 0; /* Starting pq pairing index */
        int pq_final = 0; /* Final pq pairing index */
        int p_start  = 0; /* Starting pstring index */
        int p_final  = 0; /* Final pstring index */
        int q_start  = 0; /* Starting qstring index */
        int q_final  = 0; /* Final qstring index */
        int i, j, k;
        int j_start, j_max;
        int k_start, k_max;
        struct det deti;
        int cnt = 0; /* diagonal counter */

        /* Get starting/ending values for determinant-generating loop */
        determinant_string_info(start, peosp, pegrps, qeosp, qegrps, pq,
                                npq, &pq_start, &p_start, &q_start);
        determinant_string_info(final, peosp, pegrps, qeosp, qegrps, pq,
                                npq, &pq_final, &p_final, &q_final);

        /* Each determinant is associated with a triple: (pq, p, q).
         * Because of the loop structure this triple is dependent on we
         * have to test for whether the iteration is the first/last
         * in an block, to determine what values are set. */

        /* Loop over p,q string pairings */
        cnt = 0;
        for (i = pq_start; i <= pq_final; i++) {
                if (i == pq_start) {
                        /* If first pq pair, then we skip ahead */
                        j_start = p_start;
                } else {
                        /* If not first pair, start at beginning p string. */
                        j_start = peosp[(pq[i][0])].start;
                }
                if (i == pq_final) {
                        /* If last pq pair, we end prematurely */
                        j_max = p_final + 1;
                } else {
                        /* If not last pair, we end at last p string */
                        j_max = peosp[(pq[i][0])].start +
                                peosp[(pq[i][0])].nstr;
                }

                /* Set cas flags for electron space */
                if ((peosp[(pq[i][0])].virt + qeosp[(pq[i][1])].virt) == 0) {
                        deti.cas = 1;
                } else {
                        deti.cas = 0;
                }

                /* Loop over alpha (p) strings */ 
                for (j = j_start; j < j_max; j++) {
                        /* Set alpha (p) strings */
                        deti.astr = pstrings[j];

                        /* First loop, we skip ahead */
                        if (i == pq_start &&
                            j_start == p_start && j == p_start) {
                                k_start = q_start;
                        } else {
                                k_start = qeosp[(pq[i][1])].start;
                        }
                        /* Last loop */
                        if (i == pq_final &&
                            j_max == (p_final + 1) && j == (p_final)) {
                                k_max = q_final;
                        } else {
                                k_max = qeosp[(pq[i][1])].start +
                                        qeosp[(pq[i][1])].nstr;
                        }
                        
                        /* Loop over beta (q) strings */
                        for (k = k_start; k < k_max; k++) {
                                        
                                deti.bstr = qstrings[k];
                                hdgls[cnt] = hmatels(deti, deti, mo1, mo2, aelec,
                                                     belec, intorb);
                                cnt++;
                        }
                }
        }
        return;
}
        
/*
 * determinant_string_info: compute string information given
 * a determinant.
 * Input:
 *  detindx = determinant index (position in list)
 *  peosp   = alpha electron orbital spaces
 *  pegrps  = number of alpha electron orbital spaces
 *  qeosp   = beta  electron orbital spaces
 *  qegrps  = number of beta  electron orbital spaces
 *  pq      = (p,q)-space pairings
 *  npq     = number of (p,q)-space pairings
 * Output:
 *  pqval = (p,q) pairing start
 *  pval  = p string of (p,q)-space pairing
 *  qval  = q string of (p,q)-space pairing
 */
void determinant_string_info(int detindx, struct eospace *peosp, int pegrps,
                             struct eospace *qeosp, int qegrps, int **pq,
                             int npq, int *pqval, int *pval, int *qval)
{
        int i, j, k;
        int jstart, jmax, kstart, kmax;
        int cntr = 0; /* counter */
        /* Loop over p,q string pairings */
        for (i = 0; i < npq; i++) {
                jstart = peosp[(pq[i][0])].start;
                kstart = qeosp[(pq[i][1])].start;
                jmax   = jstart + peosp[(pq[i][0])].nstr;
                kmax   = kstart + qeosp[(pq[i][1])].nstr;
                for (j = jstart; j < jmax; j++) {
                        for (k = kstart; k < kmax; k++) {
                                if (cntr == detindx) {
                                        *pqval = i;
                                        *pval = j;
                                        *qval = k;
                                        return;
                                }
                                cntr++;
                        }
                }
        }
        error_message(mpi_proc_rank, "Determinant not found",
                      "determinant_string_info");
        error_flag(mpi_proc_rank, detindx, "determinat_string_info");
        return;
}

/*
 * get_upptri_element_index: get index of an element (i,j) in
 * list of elements in upper triangle of H matrix (n x n).
 */
int get_upptri_element_index (int i, int j, int n)
{
        int result = 0;
        result = (2 * n - i) * (i - 1);
        result = result / 2;
        result = result + j;
        return result;
}

/*
 * get_upptri_element_position: get row and column indices of an n x n
 * upper triangle matrix list element.
 */
void get_upptri_element_position (int element, int n, int *i, int *j)
{
        int tmp = 0;
        *i = 0;
        *j = 0;
        for (*i = 0; *i < n; (*i)++) {
                for (*j = *i; *j < n; (*j)++) {
                        tmp++;
                        if (tmp == element) return;
                }
        }
        *i = 0;
        *j = 0;
        return;
}

/*
 * get_upptri_element_rownumber: get row number of upper triangle
 * matrix list element.
 */
int get_upptri_element_rownumber (int element, int n)
{
        int row = 0;
        int i = 0;
        for (i = 0; i <= n; i++) {
                if (get_upptri_element_index(i, i, n) > element) break;
        }
        row = i - 1;
        return row;
}

/*
 * get_upptri_size: compute the size of H matrix upper triangle.
 */
int get_upptri_size (int n)
{
        int result = 0;
        result = (n * (n + 1)) / 2;
        return result;
}
