// File: straddress.c
/********************************************************************
 * straddress
 * ----------
 * Contains string addressing utilities
 *
 * Christopher L Malbon
 * Dept. of Chemistry, The Johns Hopkins University
 *******************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "combinatorial.h"
#include "straddress.h"
#include "binary.h"

/* subfunctions
 * ------------
 * 
 * void det2pq(int det_index, int orbitals, int belec, int p, int q)
 * int  pq2det(int p, int q, int orbitals, int belec)
 * int  str2adr(int *ostr, int elec, int orbitals)
 */

void det2pq(int det_index, int orbitals, int *scrbit, int *p, int *q)
/* det2pq
 * ------
 * Returns p(alpha) and q(beta) indices for determinant index
 * Determinant indices are determined by their high,low order bits.
 * D = [pppppp][qqqqqq].
 * Each bit is the width of [orbitals].
 * 
 * Input:
 *  det_index = index of the determinant |p, q>
 *  orbitals  = number of MO's in system
 *  belec     = number of beta electrons in system
 *  scrbit    = scratch bit array
 * Output:
 *  p = alpha string index
 *  q = beta  string index 
 */
{
     int dbwidth;
     int i;

     /* determinant bit is (2 * orbitals) wide */
     dbwidth = orbitals * 2;
     
     dec2binary(det_index, scrbit, dbwidth);

     for (i = 0; i <= dbwidth; i++) {
	  printf("%d  ", scrbit[i]);
     }
     printf("\n");
     
     /* compute p */
     *p = binary2dec(scrbit, orbitals);
     /* compute q */
     *q = binary2dec(scrbit+orbitals, orbitals);
     
     return;
}

void str2det(int *astr, int *bstr, int *dstr, int orb)
{
     int i;

     /* build high order bit */
     for (i = 0; i < orb; i++) {
	  dstr[i] = astr[i];
     }
     /* build low order bit */
     for (i = 0; i < orb; i++) {
	  dstr[i + orb] = bstr[i];
     }

     return;
}
