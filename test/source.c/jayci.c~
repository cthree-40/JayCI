// File: jayci.c
/*********************************************************************
 * jayci: determinant ci algorithm
 *
 * Needs:
 *  jayci.in
 *  input.jayci (generated by jayci_exp.x)
 *  moints file (if using serial execution)
 *
 * Notes:
 *  09-22-2015: command line  memory allocation input not yet 
 *              implemented.
 * -----------------------
 * By Christopher L Malbon
 * Dept of Chemistry, The Johns Hopkins University
 ********************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include "ioutil.h"
#include "abecalc.h"
#include "binarystr.h"

/* det: determinant composed of alpha and beta occupation strings */
struct det {
    struct occstr astr; /* alpha string */
    struct occstr bstr; /* beta  string */
};

/* jayci: determinant ci algorithm
 * -------------------------------------------------------------------
 * Usage: ./jayci.c -m memory
 *
 * Execution outline:
 *  checks for all necessary files
 *  reads input: jayci.in, input.jayci, det.list
 *  generate binary determinant list
 *  generate initial guess
 *  perform davidson algorithm
 *  write vectors to disk: civfl */
void main(int argc, char *argv[])
{
    /* .. local scalars ..
     * c      = command line argument value
     * mem    = memory to be allocated
     * err    = error handling 
     * m1len  = number of 1-e integrals
     * m2len  = number of 2-e integrals */
    int c;
    int mem = 5000;
    int err = 0;

    /* .. &general scalars ..
     * elec  = total electrons in system
     * orbs  = MO's in system
     * nfrzc = number of frozen core orbitals
     * nfrzv = number of forzen virtual orbitals
     * ndocc = number of doubly occupied orbitals
     * nactv = number of active orbitals
     * xlvl  = excitation level
     * plvl  = print level */
    int elec, orbs, nfrzc, nfrzv, nactv, ndocc, xlvl;
    int plvl;

    /* .. &dalginfo scalars ..
     * maxiter   = maximum iterations
     * krymin    = minimum dimension of krylov space
     * krymax    = maximum dimension of krylov space
     * nroots    = number of roots to compute
     * prediagr  = prediagonalization subroutine
     * restol    = residual convergence tolerance
     * refdim    = reference space dimension */
    int maxiter, krymin, krymax, nroots, prediagr, refdim;
    double refdim;
    
    /* .. input.jayci scalars ..
     * ci_aelec = aelec - nfrzc
     * ci_belec = belec - nfrzc
     * ci_orbs  = orbs - nfrzc - nfrzv
     * nastr    = number of alpha strings
     * nbstr    = number of beta  strings
     * ndets    = number of determinants */
    int ci_aelec, ci_belec, ci_orbs;
    int nastr, nbstr, ndets;

    /* .. local arrays .. 
     * detlist = determinant list 
     * moints1 = 1-e integrals
     * moints2 = 2-e integrals
     * civec   = ci-vectors
     * cienergy= ci-energies */
    struct det *detlist;
    double *moints1, *moints2;
    double *civec, *cienergy;
    
    int i;
    
    /* process command line options */
    for (i = 1; i < argc; i++) {
	if (*argv[i] == '-') {
	    while (c = *++argv[i]) {
		switch (c) {
		case 'm':
		    mem = atoi(argv[i+1]);
		    break;
		default:
		    fprintf(stderr,"Illegal option: %c\n", c);
		    i = argc;
		    break;
		}
	    }
	}
    }
    if (argc != 3) {
	//fprintf(stderr,"Usage: jayci.x -m [memory]\n");
	//exit(1);
    } else {
	//fprintf(stdout,"Allocated %d bytes\n", mem);
    }
    
    /* check for input files */
    err = checkinputfiles();
    if (err != 0) {
	if (err == 1) {
	    fprintf(stderr,
		    "*** ERROR: Cannot open input file: jayci.in! ***\n");
	} else if (err == 2) {
	    fprintf(stderr,
		    "*** ERROR: Cannot open input file: input.jayci! ***\n");
	} else if (err == 3) {
	    fprintf(stderr,
		    "*** ERROR: Cannot open molecular integral file! ***\n");
	} else if (err == 4) {
	    fprintf(stderr,
		    "*** ERROR: Cannot open determinant list file! ***\n");
	} else {
	    fprintf(stderr,
		    "*** ERROR: Unknown input file error! ***\n");
	}
	exit(0);
    } else {
	fprintf(stdout, "All necessary input files present.\n");
    }
    
    /* read &general namelist */
    readgeninput(&elec, &orbs, &nfrzc, &ndocc, &nactv, &xlvl,
		 &nfrzv, &plvl, &err);
    if (err != 0) {
	fprintf(stderr,
		"*** ERROR: Error reading &general namelist. ***\n");
	exit(0);
    }
    
    /* read &dalginfo namelist */
    ///////////////////////////////////////
}
     
